version: '3.8'

services:
  # ===== DATABASE SERVICES =====
  
  # Main MongoDB instance for shared collections
  mongo:
    image: mongo:7.0
    container_name: rsf_mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: rsf-utility
    volumes:
      - mongo_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - rsf-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # TODO: Separate database services for microservice isolation
  # orderdb:
  #   image: mongo:7.0
  #   container_name: rsf_orderdb
  #   ports:
  #     - "27018:27017"
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
  #     MONGO_INITDB_DATABASE: orders
  #   volumes:
  #     - orderdb_data:/data/db
  #   networks:
  #     - rsf-network
  #   restart: unless-stopped

  # settledb:
  #   image: mongo:7.0
  #   container_name: rsf_settledb
  #   ports:
  #     - "27019:27017"
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
  #     MONGO_INITDB_DATABASE: settlements
  #   volumes:
  #     - settledb_data:/data/db
  #   networks:
  #     - rsf-network
  #   restart: unless-stopped

  # recondb:
  #   image: mongo:7.0
  #   container_name: rsf_recondb
  #   ports:
  #     - "27020:27017"
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
  #     MONGO_INITDB_DATABASE: reconciliation
  #   volumes:
  #     - recondb_data:/data/db
  #   networks:
  #     - rsf-network
  #   restart: unless-stopped

  # configdb:
  #   image: mongo:7.0
  #   container_name: rsf_configdb
  #   ports:
  #     - "27021:27017"
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
  #     MONGO_INITDB_DATABASE: config
  #   volumes:
  #     - configdb_data:/data/db
  #   networks:
  #     - rsf-network
  #   restart: unless-stopped

  # auditdb:
  #   image: mongo:7.0
  #   container_name: rsf_auditdb
  #   ports:
  #     - "27022:27017"
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
  #     MONGO_INITDB_DATABASE: audit
  #   volumes:
  #     - auditdb_data:/data/db
  #   networks:
  #     - rsf-network
  #   restart: unless-stopped

  # ===== APPLICATION SERVICES =====
  
  # Backend API Service
  backend:
    build:
      context: ../rsf-utility-backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: rsf_backend
    ports:
      - "3000:3000"
    environment:
      # Core Configuration
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      
      # Database Configuration
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongo:27017/rsf-utility}
      # TODO: Configure separate database URIs for microservice isolation
      # - ORDER_DB_URI=mongodb://orderdb:27017/orders
      # - SETTLE_DB_URI=mongodb://settledb:27017/settlements
      # - RECON_DB_URI=mongodb://recondb:27017/reconciliation
      # - CONFIG_DB_URI=mongodb://configdb:27017/config
      # - AUDIT_DB_URI=mongodb://auditdb:27017/audit
      
      # Authentication & Security
      - JWT_SECRET=${JWT_SECRET}
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
      
      # ONDC Protocol Configuration
      - ONDC_ENV=${ONDC_ENV:-STAGING}
      - GATEWAY_STAGING=${GATEWAY_STAGING}
      - GATEWAY_PREPROD=${GATEWAY_PREPROD}
      - GATEWAY_PROD=${GATEWAY_PROD}
      - REGISTRY_STAGING=${REGISTRY_STAGING}
      - REGISTRY_PREPROD=${REGISTRY_PREPROD}
      - REGISTRY_PROD=${REGISTRY_PROD}
      
      # Settlement Agency Integration
      - SETTLEMENT_AGENCY_URL=${SETTLEMENT_AGENCY_URL}
      - SETTLEMENT_AGENCY_KEY=${SETTLEMENT_AGENCY_KEY}
      
      # Observability Configuration
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOKI_HOST=${LOKI_HOST:-http://loki:3100}
      - PROMETHEUS_PORT=9464
      
      # TODO: Additional service configurations
      # - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      # - SMTP_HOST=${SMTP_HOST}
      # - SMTP_PORT=${SMTP_PORT:-587}
      # - NOTIFICATION_SERVICE_URL=${NOTIFICATION_SERVICE_URL}
    volumes:
      - backend_logs:/app/logs
      # TODO: Add volume for file uploads if needed
      # - backend_uploads:/app/uploads
    networks:
      - rsf-network
    depends_on:
      mongo:
        condition: service_healthy
      # TODO: Add dependencies for separate databases
      # orderdb:
      #   condition: service_started
      # settledb:
      #   condition: service_started
      # recondb:
      #   condition: service_started
      # configdb:
      #   condition: service_started
      # auditdb:
      #   condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Frontend Web Application
  frontend:
    build:
      context: ../rsf-utility-frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
        REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL:-http://localhost:3000}
    container_name: rsf_frontend
    ports:
      - "6500:3000"
    environment:
      # Backend Integration
      - REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL:-http://backend:3000}
      
      # Build Configuration
      - GENERATE_SOURCEMAP=${GENERATE_SOURCEMAP:-false}
      - PUBLIC_URL=${PUBLIC_URL:-/rsf-sdk-utility}
      
      # TODO: Additional frontend configurations
      # - REACT_APP_API_TIMEOUT=${REACT_APP_API_TIMEOUT:-30000}
      # - REACT_APP_POLLING_INTERVAL=${REACT_APP_POLLING_INTERVAL:-5000}
      # - REACT_APP_ENVIRONMENT=${REACT_APP_ENVIRONMENT:-production}
    networks:
      - rsf-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # ===== OBSERVABILITY SERVICES =====

  # Grafana Loki for Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: rsf_loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
      - ./config/loki-config.yaml:/etc/loki/local-config.yaml:ro
    networks:
      - rsf-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Grafana for Metrics and Logs Visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: rsf_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=${GRAFANA_PLUGINS:-grafana-piechart-panel}
      # TODO: Configure additional Grafana settings
      # - GF_SMTP_ENABLED=${GF_SMTP_ENABLED:-false}
      # - GF_SMTP_HOST=${GF_SMTP_HOST}
      # - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - rsf-network
    depends_on:
      loki:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # TODO: Add Prometheus for Metrics Collection
  # prometheus:
  #   image: prom/prometheus:v2.45.0
  #   container_name: rsf_prometheus
  #   ports:
  #     - "9090:9090"
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=200h'
  #     - '--web.enable-lifecycle'
  #   volumes:
  #     - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   networks:
  #     - rsf-network
  #   restart: unless-stopped

  # TODO: Add Redis for Caching and Session Storage
  # redis:
  #   image: redis:7.0-alpine
  #   container_name: rsf_redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - rsf-network
  #   command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
  #   restart: unless-stopped

  # TODO: Add NGINX Reverse Proxy
  # nginx:
  #   image: nginx:1.25-alpine
  #   container_name: rsf_nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/ssl:ro
  #     - nginx_logs:/var/log/nginx
  #   networks:
  #     - rsf-network
  #   depends_on:
  #     - backend
  #     - frontend
  #   restart: unless-stopped

# ===== PERSISTENT VOLUMES =====
volumes:
  # Database volumes
  mongo_data:
    driver: local
    # TODO: Configure external volume for production
    # external:
    #   name: rsf_mongo_data_prod
  
  # TODO: Separate database volumes for microservice isolation
  # orderdb_data:
  #   driver: local
  # settledb_data:
  #   driver: local
  # recondb_data:
  #   driver: local
  # configdb_data:
  #   driver: local
  # auditdb_data:
  #   driver: local
  
  # Application volumes
  backend_logs:
    driver: local
  # backend_uploads:
  #   driver: local
  
  # Observability volumes
  loki_data:
    driver: local
  grafana_data:
    driver: local
  # prometheus_data:
  #   driver: local
  # redis_data:
  #   driver: local
  # nginx_logs:
  #   driver: local

# ===== NETWORK CONFIGURATION =====
networks:
  rsf-network:
    driver: bridge
    # TODO: Configure production network settings
    # driver_opts:
    #   com.docker.network.bridge.name: rsf-bridge
    # ipam:
    #   config:
    #     - subnet: 172.20.0.0/16
    #       gateway: 172.20.0.1

# TODO: Production deployment considerations:
# 1. Secrets management using Docker Secrets or external secret stores
# 2. SSL/TLS certificate management with Let's Encrypt
# 3. Database backup and restore procedures
# 4. Auto-scaling configuration for cloud deployments
# 5. Security scanning and vulnerability management
# 6. Performance monitoring and alerting rules
# 7. Log rotation and retention policies
# 8. Multi-environment configuration (dev/staging/prod)
# 9. Container registry authentication
# 10. Health check endpoints for all services
# 11. Graceful shutdown handling
# 12. Resource quotas and limits
# 13. Network policies and service mesh integration
# 14. CI/CD pipeline integration
# 15. Disaster recovery procedures
