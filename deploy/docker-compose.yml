version: '3.8'

services:
  # MongoDB Database Service
  mongodb:
    image: mongo:latest
    container_name: rsf_mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - rsf-network
    environment:
      # TODO: Configure MongoDB authentication in production
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: rsf-utility
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Backend API Service
  rsf-backend:
    build:
      context: ../rsf-utility-backend
      dockerfile: Dockerfile
    container_name: rsf_backend
    ports:
      - "3000:3000"
    environment:
      # Core Configuration
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/rsf-utility
      
      # Authentication & Security
      - JWT_SECRET=${JWT_SECRET}
      - CLIENT_ID=${CLIENT_ID}
      
      # ONDC Protocol Configuration
      - ONDC_ENV=${ONDC_ENV:-STAGING}
      - GATEWAY_STAGING=${GATEWAY_STAGING}
      - GATEWAY_PREPROD=${GATEWAY_PREPROD}
      - GATEWAY_PROD=${GATEWAY_PROD}
      - REGISTRY_STAGING=${REGISTRY_STAGING}
      - REGISTRY_PREPROD=${REGISTRY_PREPROD}
      - REGISTRY_PROD=${REGISTRY_PROD}
      
      # Settlement Agency Integration
      - SETTLEMENT_AGENCY_URL=${SETTLEMENT_AGENCY_URL}
      
      # Observability Configuration
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOKI_HOST=${LOKI_HOST}
    networks:
      - rsf-network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    # TODO: Implement non-root user for better security
    # user: "1001:1001"
    # TODO: Add resource limits for production
    # deploy:
    #   resources:
    #     limits:
    #       memory: 2G
    #       cpus: '1'

  # Frontend Web Application
  rsf-frontend:
    build:
      context: ../rsf-utility-frontend
      dockerfile: Dockerfile
    container_name: rsf_frontend
    ports:
      - "6500:3000"
    environment:
      # Backend Integration
      - REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL:-http://localhost:3000}
      
      # Build Configuration
      - GENERATE_SOURCEMAP=${GENERATE_SOURCEMAP:-false}
      - PUBLIC_URL=${PUBLIC_URL:-/rsf-sdk-utility}
    networks:
      - rsf-network
    depends_on:
      rsf-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    # TODO: Add resource limits for production
    # deploy:
    #   resources:
    #     limits:
    #       memory: 1G
    #       cpus: '0.5'

  # TODO: Add NGINX reverse proxy for production
  # nginx:
  #   image: nginx:alpine
  #   container_name: rsf_nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/ssl:ro
  #   networks:
  #     - rsf-network
  #   depends_on:
  #     - rsf-backend
  #     - rsf-frontend
  #   restart: unless-stopped

  # TODO: Add observability stack for production monitoring
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: rsf_prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   networks:
  #     - rsf-network
  #   restart: unless-stopped

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: rsf_grafana
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - rsf-network
  #   restart: unless-stopped

  # loki:
  #   image: grafana/loki:latest
  #   container_name: rsf_loki
  #   ports:
  #     - "3100:3100"
  #   volumes:
  #     - loki_data:/loki
  #   networks:
  #     - rsf-network
  #   restart: unless-stopped

# Persistent Volume Definitions
volumes:
  mongo_data:
    driver: local
    # TODO: Configure external volume for production persistence
    # external:
    #   name: rsf_mongo_data_prod
  
  # TODO: Uncomment for observability stack
  # prometheus_data:
  #   driver: local
  # grafana_data:
  #   driver: local
  # loki_data:
  #   driver: local

# Network Configuration
networks:
  rsf-network:
    driver: bridge
    # TODO: Configure custom network settings for production
    # driver_opts:
    #   com.docker.network.bridge.name: rsf-bridge
    # ipam:
    #   config:
    #     - subnet: 172.20.0.0/16

# TODO: Add additional configuration for production deployment:
# 1. Secrets management using Docker Secrets
# 2. Health check endpoints for all services
# 3. Backup and restore procedures
# 4. SSL certificate management
# 5. Log rotation and retention policies
# 6. Security scanning and compliance
# 7. Performance monitoring and alerting
# 8. Auto-scaling configuration
# 9. Database replica set configuration
# 10. Container registry configuration
